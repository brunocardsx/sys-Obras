#!/usr/bin/env node

/**
 * Script para migrar banco de dados local para Railway
 * Uso: node scripts/migrate-to-railway.js
 */

const { Sequelize } = require('sequelize');
const fs = require('fs');
const path = require('path');

// Configura√ß√µes do banco local
const LOCAL_CONFIG = {
  host: 'localhost',
  database: 'sysobras',
  username: 'postgres',
  password: 'admin',
  dialect: 'postgres'
};

// Configura√ß√µes do Railway (ser√£o preenchidas via env)
const RAILWAY_CONFIG = {
  host: process.env.RAILWAY_DB_HOST,
  database: process.env.RAILWAY_DB_NAME,
  username: process.env.RAILWAY_DB_USER,
  password: process.env.RAILWAY_DB_PASS,
  dialect: 'postgres'
};

async function migrateDatabase() {
  console.log('üöÄ Iniciando migra√ß√£o do banco de dados...');
  
  // Verificar se as vari√°veis do Railway est√£o definidas
  if (!RAILWAY_CONFIG.host || !RAILWAY_CONFIG.database) {
    console.error('‚ùå Vari√°veis de ambiente do Railway n√£o encontradas!');
    console.log('Configure as seguintes vari√°veis:');
    console.log('- RAILWAY_DB_HOST');
    console.log('- RAILWAY_DB_NAME');
    console.log('- RAILWAY_DB_USER');
    console.log('- RAILWAY_DB_PASS');
    process.exit(1);
  }

  const localDb = new Sequelize(LOCAL_CONFIG);
  const railwayDb = new Sequelize(RAILWAY_CONFIG);

  try {
    // Testar conex√µes
    console.log('üîå Testando conex√µes...');
    await localDb.authenticate();
    console.log('‚úÖ Conex√£o com banco local: OK');
    
    await railwayDb.authenticate();
    console.log('‚úÖ Conex√£o com Railway: OK');

    // Listar tabelas
    const tables = await localDb.getQueryInterface().showAllTables();
    console.log(`üìã Encontradas ${tables.length} tabelas:`);
    tables.forEach(table => console.log(`  - ${table}`));

    // Migrar cada tabela
    for (const table of tables) {
      console.log(`\nüîÑ Migrando tabela: ${table}`);
      
      // Obter estrutura da tabela
      const tableInfo = await localDb.getQueryInterface().describeTable(table);
      
      // Criar tabela no Railway (se n√£o existir)
      try {
        await railwayDb.getQueryInterface().describeTable(table);
        console.log(`  ‚úÖ Tabela ${table} j√° existe no Railway`);
      } catch (error) {
        console.log(`  üèóÔ∏è Criando tabela ${table} no Railway...`);
        // Aqui voc√™ precisaria implementar a cria√ß√£o da tabela
        // baseada na estrutura obtida
      }

      // Migrar dados
      const data = await localDb.query(`SELECT * FROM "${table}"`, {
        type: Sequelize.QueryTypes.SELECT
      });

      if (data.length > 0) {
        console.log(`  üìä Migrando ${data.length} registros...`);
        
        // Limpar dados existentes
        await railwayDb.query(`DELETE FROM "${table}"`);
        
        // Inserir novos dados
        for (const row of data) {
          await railwayDb.query(`INSERT INTO "${table}" (${Object.keys(row).join(', ')}) VALUES (${Object.values(row).map(v => `'${v}'`).join(', ')})`);
        }
        
        console.log(`  ‚úÖ ${data.length} registros migrados com sucesso`);
      } else {
        console.log(`  ‚ÑπÔ∏è Tabela ${table} est√° vazia`);
      }
    }

    console.log('\nüéâ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('‚úÖ Todos os dados foram migrados para o Railway');

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error.message);
    process.exit(1);
  } finally {
    await localDb.close();
    await railwayDb.close();
  }
}

// Executar migra√ß√£o
if (require.main === module) {
  migrateDatabase().catch(console.error);
}

module.exports = { migrateDatabase };
